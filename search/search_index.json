{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Assignment Add password requirement At least 18 alphanumeric characters and list of special chars !@#$&* [Add] Maximum length is 1000. Because 1000 is enough as password and would like not to take care of large length like sys.maxsize from quality point of view. Too large length password may impact to the system like performance wise. How to run test ( setup python3 environment ) $ git clone git @ github . com : ki4070ma / change - passwd - func . git $ cd change_passwd_func $ pip install - r requirements . txt $ py . test $ ( py . test -- capture = no -- verbose -- cov . -- cov - report = html ) # To show details and generate code coverage report Test design and Test cases Used decision table to check coverage For verify_pswd, find_pswd, check_similarity, change_pswd https://docs.google.com/spreadsheets/d/1Gq1EUD5i_Ko0uE9PCUINHnwNm5oDvesw5OMNhHfZT14/edit?usp=sharing Others You can try main.py as below $python3 main.py \"\\!12Ab11Ab11Ab11Ab11Ab\" \"\\!12Ab11Ab11abcdefghij\" [ pswd ] : !12Ab11Ab11abcdefghij [ OK ] Valid password [ string1 ] : !12Ab11Ab11Ab11Ab11Ab [ string2 ] : !12Ab11Ab11abcdefghij [ OK ] Changed password successfully Objective We want you to create a change password function based on below specification. This change password function will just return True or False back to function caller to inform the caller whether the password can be changed successfully or not. For the old password requirement you can do it as a simple mock function. Apart from the change password function you may need to write the automate test for the created function as well. Instructions\uff1a * You can use your choice of programming language * Hosting on your personal GitHub page, starting from the initial commit is expected * A simple README, with necessary setup instruction and note on any peculiar cases handled will be appreciated Change password function Requirements ChangePassword(oldPassword: String, newPassword: String) [py] change_pswd(old_pswd: str, new_pswd: str) -> bool Tasks Please complete the point below 1. Code for change password function 2. Implement automate test for the created function, test cases with test data provide in each case 3. The verify password with system and similar check function should be a mock which return True/False Password requirement At least 18 alphanumeric characters and list of special chars !@#$&* At least 1 Upper case, 1 lower case ,least 1 numeric, 1 special character No duplicate repeat characters more than 4 No more than 4 special characters 50 % of password should not be a number Change password requirement Old password should match with system New password should be a valid password password is not similar to old password < 80% match.","title":"Home"},{"location":"#assignment","text":"","title":"Assignment"},{"location":"#add-password-requirement","text":"At least 18 alphanumeric characters and list of special chars !@#$&* [Add] Maximum length is 1000. Because 1000 is enough as password and would like not to take care of large length like sys.maxsize from quality point of view. Too large length password may impact to the system like performance wise.","title":"Add password requirement"},{"location":"#how-to-run-test","text":"( setup python3 environment ) $ git clone git @ github . com : ki4070ma / change - passwd - func . git $ cd change_passwd_func $ pip install - r requirements . txt $ py . test $ ( py . test -- capture = no -- verbose -- cov . -- cov - report = html ) # To show details and generate code coverage report","title":"How to run test"},{"location":"#test-design-and-test-cases","text":"Used decision table to check coverage For verify_pswd, find_pswd, check_similarity, change_pswd https://docs.google.com/spreadsheets/d/1Gq1EUD5i_Ko0uE9PCUINHnwNm5oDvesw5OMNhHfZT14/edit?usp=sharing","title":"Test design and Test cases"},{"location":"#others","text":"You can try main.py as below $python3 main.py \"\\!12Ab11Ab11Ab11Ab11Ab\" \"\\!12Ab11Ab11abcdefghij\" [ pswd ] : !12Ab11Ab11abcdefghij [ OK ] Valid password [ string1 ] : !12Ab11Ab11Ab11Ab11Ab [ string2 ] : !12Ab11Ab11abcdefghij [ OK ] Changed password successfully","title":"Others"},{"location":"#objective","text":"We want you to create a change password function based on below specification. This change password function will just return True or False back to function caller to inform the caller whether the password can be changed successfully or not. For the old password requirement you can do it as a simple mock function. Apart from the change password function you may need to write the automate test for the created function as well. Instructions\uff1a * You can use your choice of programming language * Hosting on your personal GitHub page, starting from the initial commit is expected * A simple README, with necessary setup instruction and note on any peculiar cases handled will be appreciated","title":"Objective"},{"location":"#change-password-function","text":"","title":"Change password function"},{"location":"#requirements","text":"ChangePassword(oldPassword: String, newPassword: String) [py] change_pswd(old_pswd: str, new_pswd: str) -> bool","title":"Requirements"},{"location":"#tasks","text":"Please complete the point below 1. Code for change password function 2. Implement automate test for the created function, test cases with test data provide in each case 3. The verify password with system and similar check function should be a mock which return True/False","title":"Tasks"},{"location":"#password-requirement","text":"At least 18 alphanumeric characters and list of special chars !@#$&* At least 1 Upper case, 1 lower case ,least 1 numeric, 1 special character No duplicate repeat characters more than 4 No more than 4 special characters 50 % of password should not be a number","title":"Password requirement"},{"location":"#change-password-requirement","text":"Old password should match with system New password should be a valid password password is not similar to old password < 80% match.","title":"Change password requirement"},{"location":"reference/change_pswd_func/","text":"Module change_pswd_func Sub-modules change_pswd_func.change_pswd change_pswd_func.check_similarity change_pswd_func.constants change_pswd_func.find_pswd change_pswd_func.log change_pswd_func.verify_pswd","title":"Index"},{"location":"reference/change_pswd_func/#module-change_pswd_func","text":"","title":"Module change_pswd_func"},{"location":"reference/change_pswd_func/#sub-modules","text":"change_pswd_func.change_pswd change_pswd_func.check_similarity change_pswd_func.constants change_pswd_func.find_pswd change_pswd_func.log change_pswd_func.verify_pswd","title":"Sub-modules"},{"location":"reference/change_pswd_func/change_pswd/","text":"Module change_pswd_func.change_pswd View Source 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 #!/usr/bin/env python from .check_similarity import similar from .find_pswd import find_pswd from .log import LogMsgChangePaswd from .verify_pswd import verify_pswd def change_pswd ( old_pswd : str , new_pswd : str ) -> bool : if not find_pswd ( old_pswd ): ''' [Change password requirement] 1. Old password should match with system ''' print ( LogMsgChangePaswd . INVALID_OLD_PSWD ) elif not verify_pswd ( new_pswd ): ''' [Change password requirement] 2. New password should be a valid password ''' print ( LogMsgChangePaswd . INVALID_NEW_PSWD ) elif similar ( old_pswd , new_pswd ): ''' [Change password requirement] 3. password is not similar to old password < 80% match. ''' print ( LogMsgChangePaswd . SIMILAR_TO_OLD_ONE ) else : print ( LogMsgChangePaswd . SUCCESS ) return True return False Functions change_pswd def change_pswd ( old_pswd : str , new_pswd : str ) -> bool View Source def change_pswd ( old_pswd : str , new_pswd : str ) -> bool : if not find_pswd ( old_pswd ) : ''' [ Change password requirement ] 1 . Old password should match with system ''' print ( LogMsgChangePaswd . INVALID_OLD_PSWD ) elif not verify_pswd ( new_pswd ) : ''' [ Change password requirement ] 2 . New password should be a valid password ''' print ( LogMsgChangePaswd . INVALID_NEW_PSWD ) elif similar ( old_pswd , new_pswd ) : ''' [ Change password requirement ] 3 . password is not similar to old password < 80 % match . ''' print ( LogMsgChangePaswd . SIMILAR_TO_OLD_ONE ) else : print ( LogMsgChangePaswd . SUCCESS ) return True return False","title":"Change Pswd"},{"location":"reference/change_pswd_func/change_pswd/#module-change_pswd_funcchange_pswd","text":"View Source 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 #!/usr/bin/env python from .check_similarity import similar from .find_pswd import find_pswd from .log import LogMsgChangePaswd from .verify_pswd import verify_pswd def change_pswd ( old_pswd : str , new_pswd : str ) -> bool : if not find_pswd ( old_pswd ): ''' [Change password requirement] 1. Old password should match with system ''' print ( LogMsgChangePaswd . INVALID_OLD_PSWD ) elif not verify_pswd ( new_pswd ): ''' [Change password requirement] 2. New password should be a valid password ''' print ( LogMsgChangePaswd . INVALID_NEW_PSWD ) elif similar ( old_pswd , new_pswd ): ''' [Change password requirement] 3. password is not similar to old password < 80% match. ''' print ( LogMsgChangePaswd . SIMILAR_TO_OLD_ONE ) else : print ( LogMsgChangePaswd . SUCCESS ) return True return False","title":"Module change_pswd_func.change_pswd"},{"location":"reference/change_pswd_func/change_pswd/#functions","text":"","title":"Functions"},{"location":"reference/change_pswd_func/change_pswd/#change_pswd","text":"def change_pswd ( old_pswd : str , new_pswd : str ) -> bool View Source def change_pswd ( old_pswd : str , new_pswd : str ) -> bool : if not find_pswd ( old_pswd ) : ''' [ Change password requirement ] 1 . Old password should match with system ''' print ( LogMsgChangePaswd . INVALID_OLD_PSWD ) elif not verify_pswd ( new_pswd ) : ''' [ Change password requirement ] 2 . New password should be a valid password ''' print ( LogMsgChangePaswd . INVALID_NEW_PSWD ) elif similar ( old_pswd , new_pswd ) : ''' [ Change password requirement ] 3 . password is not similar to old password < 80 % match . ''' print ( LogMsgChangePaswd . SIMILAR_TO_OLD_ONE ) else : print ( LogMsgChangePaswd . SUCCESS ) return True return False","title":"change_pswd"},{"location":"reference/change_pswd_func/check_similarity/","text":"Module change_pswd_func.check_similarity View Source 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 #!/usr/bin/env python from Levenshtein import distance # type: ignore from .constants import SIMILARITY_THRESHOLD def similar ( string1 : str , string2 : str ) -> bool : '''Check two strings similarity Calculate distance between two strings and compare distance with threshold [Change password requirement] 3. password is not similar to old password < 80% match. Returns: bool: True if two strings are similar otherwise False ''' if type ( string1 ) is not str or type ( string2 ) is not str : raise TypeError ( 'Args need to be str type.' ) print ( ' \\n [string1]: {}' . format ( string1 )) # '\\n' is for pytest output print ( '[string2]: {}' . format ( string2 )) normalized_distance = distance ( string1 , string2 ) / max ( len ( string1 ), len ( string2 )) return 1 - normalized_distance > SIMILARITY_THRESHOLD Variables SIMILARITY_THRESHOLD Functions similar def similar ( string1 : str , string2 : str ) -> bool Check two strings similarity Calculate distance between two strings and compare distance with threshold [Change password requirement] 3. password is not similar to old password < 80% match. Returns: bool: True if two strings are similar otherwise False View Source def similar ( string1 : str , string2 : str ) -> bool : ''' Check two strings similarity Calculate distance between two strings and compare distance with threshold [ Change password requirement ] 3 . password is not similar to old password < 80 % match . Returns : bool : True if two strings are similar otherwise False ''' if type ( string1 ) is not str or type ( string2 ) is not str : raise TypeError ( ' Args need to be str type. ' ) print ( ' \\n [string1]: {} ' . format ( string1 )) # ' \\n ' is for pytest output print ( ' [string2]: {} ' . format ( string2 )) normalized_distance = distance ( string1 , string2 ) / max ( len ( string1 ) , len ( string2 )) return 1 - normalized_distance > SIMILARITY_THRESHOLD","title":"Check Similarity"},{"location":"reference/change_pswd_func/check_similarity/#module-change_pswd_funccheck_similarity","text":"View Source 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 #!/usr/bin/env python from Levenshtein import distance # type: ignore from .constants import SIMILARITY_THRESHOLD def similar ( string1 : str , string2 : str ) -> bool : '''Check two strings similarity Calculate distance between two strings and compare distance with threshold [Change password requirement] 3. password is not similar to old password < 80% match. Returns: bool: True if two strings are similar otherwise False ''' if type ( string1 ) is not str or type ( string2 ) is not str : raise TypeError ( 'Args need to be str type.' ) print ( ' \\n [string1]: {}' . format ( string1 )) # '\\n' is for pytest output print ( '[string2]: {}' . format ( string2 )) normalized_distance = distance ( string1 , string2 ) / max ( len ( string1 ), len ( string2 )) return 1 - normalized_distance > SIMILARITY_THRESHOLD","title":"Module change_pswd_func.check_similarity"},{"location":"reference/change_pswd_func/check_similarity/#variables","text":"SIMILARITY_THRESHOLD","title":"Variables"},{"location":"reference/change_pswd_func/check_similarity/#functions","text":"","title":"Functions"},{"location":"reference/change_pswd_func/check_similarity/#similar","text":"def similar ( string1 : str , string2 : str ) -> bool Check two strings similarity Calculate distance between two strings and compare distance with threshold [Change password requirement] 3. password is not similar to old password < 80% match. Returns: bool: True if two strings are similar otherwise False View Source def similar ( string1 : str , string2 : str ) -> bool : ''' Check two strings similarity Calculate distance between two strings and compare distance with threshold [ Change password requirement ] 3 . password is not similar to old password < 80 % match . Returns : bool : True if two strings are similar otherwise False ''' if type ( string1 ) is not str or type ( string2 ) is not str : raise TypeError ( ' Args need to be str type. ' ) print ( ' \\n [string1]: {} ' . format ( string1 )) # ' \\n ' is for pytest output print ( ' [string2]: {} ' . format ( string2 )) normalized_distance = distance ( string1 , string2 ) / max ( len ( string1 ) , len ( string2 )) return 1 - normalized_distance > SIMILARITY_THRESHOLD","title":"similar"},{"location":"reference/change_pswd_func/constants/","text":"Module change_pswd_func.constants View Source 1 2 3 4 5 6 7 8 9 10 11 12 13 #!/usr/bin/env python SP_CHARS = [ '!' , '@' , '#' , '$' , '&' , '*' ] MIN_VALID_LENGTH = 18 MAX_VALID_LENGTH = 1000 MAX_CHAR_CONTINUOUS_NUM = 4 MAX_SP_CHAR_NUM = 4 SIMILARITY_THRESHOLD = 0.8 # 80% matching Variables MAX_CHAR_CONTINUOUS_NUM MAX_SP_CHAR_NUM MAX_VALID_LENGTH MIN_VALID_LENGTH SIMILARITY_THRESHOLD SP_CHARS","title":"Constants"},{"location":"reference/change_pswd_func/constants/#module-change_pswd_funcconstants","text":"View Source 1 2 3 4 5 6 7 8 9 10 11 12 13 #!/usr/bin/env python SP_CHARS = [ '!' , '@' , '#' , '$' , '&' , '*' ] MIN_VALID_LENGTH = 18 MAX_VALID_LENGTH = 1000 MAX_CHAR_CONTINUOUS_NUM = 4 MAX_SP_CHAR_NUM = 4 SIMILARITY_THRESHOLD = 0.8 # 80% matching","title":"Module change_pswd_func.constants"},{"location":"reference/change_pswd_func/constants/#variables","text":"MAX_CHAR_CONTINUOUS_NUM MAX_SP_CHAR_NUM MAX_VALID_LENGTH MIN_VALID_LENGTH SIMILARITY_THRESHOLD SP_CHARS","title":"Variables"},{"location":"reference/change_pswd_func/find_pswd/","text":"Module change_pswd_func.find_pswd View Source 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 #!/usr/bin/env python from typing import List def find_pswd ( pswd : str ) -> bool : return pswd in load_system_pswd () def load_system_pswd ( filepath = 'change_pswd_func/file/pswds_on_system' ) -> List [ str ]: pswds = [] with open ( filepath , 'r' ) as fr : for line in fr . readlines (): pswds . append ( line . strip ()) return pswds Functions find_pswd def find_pswd ( pswd : str ) -> bool View Source def find_pswd ( pswd : str ) -> bool : return pswd in load_system_pswd () load_system_pswd def load_system_pswd ( filepath = 'change_pswd_func/file/pswds_on_system' ) -> List [ str ] View Source def load_system_pswd ( filepath = ' change_pswd_func/file/pswds_on_system ' ) -> List [ str ]: pswds = [] with open ( filepath , ' r ' ) as fr : for line in fr . readlines () : pswds . append ( line . strip ()) return pswds","title":"Find Pswd"},{"location":"reference/change_pswd_func/find_pswd/#module-change_pswd_funcfind_pswd","text":"View Source 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 #!/usr/bin/env python from typing import List def find_pswd ( pswd : str ) -> bool : return pswd in load_system_pswd () def load_system_pswd ( filepath = 'change_pswd_func/file/pswds_on_system' ) -> List [ str ]: pswds = [] with open ( filepath , 'r' ) as fr : for line in fr . readlines (): pswds . append ( line . strip ()) return pswds","title":"Module change_pswd_func.find_pswd"},{"location":"reference/change_pswd_func/find_pswd/#functions","text":"","title":"Functions"},{"location":"reference/change_pswd_func/find_pswd/#find_pswd","text":"def find_pswd ( pswd : str ) -> bool View Source def find_pswd ( pswd : str ) -> bool : return pswd in load_system_pswd ()","title":"find_pswd"},{"location":"reference/change_pswd_func/find_pswd/#load_system_pswd","text":"def load_system_pswd ( filepath = 'change_pswd_func/file/pswds_on_system' ) -> List [ str ] View Source def load_system_pswd ( filepath = ' change_pswd_func/file/pswds_on_system ' ) -> List [ str ]: pswds = [] with open ( filepath , ' r ' ) as fr : for line in fr . readlines () : pswds . append ( line . strip ()) return pswds","title":"load_system_pswd"},{"location":"reference/change_pswd_func/log/","text":"Module change_pswd_func.log View Source 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 #!/usr/bin/env python from typing import Generic , TypeVar from .constants import ( MAX_CHAR_CONTINUOUS_NUM , MAX_SP_CHAR_NUM , MAX_VALID_LENGTH , MIN_VALID_LENGTH ) T = TypeVar ( 'T' ) class LogMsgVerifyPswd ( Generic [ T ]): # TODO Can be used these msg to check which message is shown when validation is failed on unit test INVALID_LENGTH = '[NG] The length needs to be from {} to {}.' . format ( MIN_VALID_LENGTH , MAX_VALID_LENGTH ) INVALID_CHAR = '[NG] Included invalid char' NOT_ALL_PATTERNS = \"[NG] All necessary patterns aren't included\" OVER_CONTINUOUS_SAME_CHARS = '[NG] Included continous more than {} same chars' . format ( MAX_CHAR_CONTINUOUS_NUM ) OVER_SP_CHAR_NUM = '[NG] Included more than {} special characters' . format ( MAX_SP_CHAR_NUM ) MORE_THAN_HALF_OF_LENGTH = '[NG] 50 % o f password should not be a number' VALID = '[OK] Valid password' class LogMsgChangePaswd ( Generic [ T ]): # TODO Can be used these msg to check which message is shown when validation is failed on unit test INVALID_OLD_PSWD = '[NG] Could not find old password in the system' INVALID_NEW_PSWD = '[NG] Could not change password due to invalid new password' SIMILAR_TO_OLD_ONE = '[NG] Could not change password due to similar to previous one' SUCCESS = '[OK] Changed password successfully' Variables MAX_CHAR_CONTINUOUS_NUM MAX_SP_CHAR_NUM MAX_VALID_LENGTH MIN_VALID_LENGTH T Classes LogMsgChangePaswd class LogMsgChangePaswd ( / , * args , ** kwargs ) Abstract base class for generic types. A generic type is typically declared by inheriting from this class parameterized with one or more type variables. For example, a generic mapping type might be defined as:: class Mapping(Generic[KT, VT]): def getitem (self, key: KT) -> VT: ... # Etc. This class can then be used as follows:: def lookup_name(mapping: Mapping[KT, VT], key: KT, default: VT) -> VT: try: return mapping[key] except KeyError: return default View Source class LogMsgChangePaswd ( Generic [ T ] ) : # TODO Can be used these msg to check which message is shown when validation is failed on unit test INVALID_OLD_PSWD = '[NG] Could not find old password in the system' INVALID_NEW_PSWD = '[NG] Could not change password due to invalid new password' SIMILAR_TO_OLD_ONE = '[NG] Could not change password due to similar to previous one' SUCCESS = '[OK] Changed password successfully' Ancestors (in MRO) typing.Generic Class variables INVALID_NEW_PSWD INVALID_OLD_PSWD SIMILAR_TO_OLD_ONE SUCCESS LogMsgVerifyPswd class LogMsgVerifyPswd ( / , * args , ** kwargs ) Abstract base class for generic types. A generic type is typically declared by inheriting from this class parameterized with one or more type variables. For example, a generic mapping type might be defined as:: class Mapping(Generic[KT, VT]): def getitem (self, key: KT) -> VT: ... # Etc. This class can then be used as follows:: def lookup_name(mapping: Mapping[KT, VT], key: KT, default: VT) -> VT: try: return mapping[key] except KeyError: return default View Source class LogMsgVerifyPswd ( Generic [ T ] ) : # TODO Can be used these msg to check which message is shown when validation is failed on unit test INVALID_LENGTH = '[NG] The length needs to be from {} to {}.' . format ( MIN_VALID_LENGTH , MAX_VALID_LENGTH ) INVALID_CHAR = '[NG] Included invalid char' NOT_ALL_PATTERNS = \"[NG] All necessary patterns aren't included\" OVER_CONTINUOUS_SAME_CHARS = '[NG] Included continous more than {} same chars' . format ( MAX_CHAR_CONTINUOUS_NUM ) OVER_SP_CHAR_NUM = '[NG] Included more than {} special characters' . format ( MAX_SP_CHAR_NUM ) MORE_THAN_HALF_OF_LENGTH = '[NG] 50 % of password should not be a number' VALID = '[OK] Valid password' Ancestors (in MRO) typing.Generic Class variables INVALID_CHAR INVALID_LENGTH MORE_THAN_HALF_OF_LENGTH NOT_ALL_PATTERNS OVER_CONTINUOUS_SAME_CHARS OVER_SP_CHAR_NUM VALID","title":"Log"},{"location":"reference/change_pswd_func/log/#module-change_pswd_funclog","text":"View Source 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 #!/usr/bin/env python from typing import Generic , TypeVar from .constants import ( MAX_CHAR_CONTINUOUS_NUM , MAX_SP_CHAR_NUM , MAX_VALID_LENGTH , MIN_VALID_LENGTH ) T = TypeVar ( 'T' ) class LogMsgVerifyPswd ( Generic [ T ]): # TODO Can be used these msg to check which message is shown when validation is failed on unit test INVALID_LENGTH = '[NG] The length needs to be from {} to {}.' . format ( MIN_VALID_LENGTH , MAX_VALID_LENGTH ) INVALID_CHAR = '[NG] Included invalid char' NOT_ALL_PATTERNS = \"[NG] All necessary patterns aren't included\" OVER_CONTINUOUS_SAME_CHARS = '[NG] Included continous more than {} same chars' . format ( MAX_CHAR_CONTINUOUS_NUM ) OVER_SP_CHAR_NUM = '[NG] Included more than {} special characters' . format ( MAX_SP_CHAR_NUM ) MORE_THAN_HALF_OF_LENGTH = '[NG] 50 % o f password should not be a number' VALID = '[OK] Valid password' class LogMsgChangePaswd ( Generic [ T ]): # TODO Can be used these msg to check which message is shown when validation is failed on unit test INVALID_OLD_PSWD = '[NG] Could not find old password in the system' INVALID_NEW_PSWD = '[NG] Could not change password due to invalid new password' SIMILAR_TO_OLD_ONE = '[NG] Could not change password due to similar to previous one' SUCCESS = '[OK] Changed password successfully'","title":"Module change_pswd_func.log"},{"location":"reference/change_pswd_func/log/#variables","text":"MAX_CHAR_CONTINUOUS_NUM MAX_SP_CHAR_NUM MAX_VALID_LENGTH MIN_VALID_LENGTH T","title":"Variables"},{"location":"reference/change_pswd_func/log/#classes","text":"","title":"Classes"},{"location":"reference/change_pswd_func/log/#logmsgchangepaswd","text":"class LogMsgChangePaswd ( / , * args , ** kwargs ) Abstract base class for generic types. A generic type is typically declared by inheriting from this class parameterized with one or more type variables. For example, a generic mapping type might be defined as:: class Mapping(Generic[KT, VT]): def getitem (self, key: KT) -> VT: ... # Etc. This class can then be used as follows:: def lookup_name(mapping: Mapping[KT, VT], key: KT, default: VT) -> VT: try: return mapping[key] except KeyError: return default View Source class LogMsgChangePaswd ( Generic [ T ] ) : # TODO Can be used these msg to check which message is shown when validation is failed on unit test INVALID_OLD_PSWD = '[NG] Could not find old password in the system' INVALID_NEW_PSWD = '[NG] Could not change password due to invalid new password' SIMILAR_TO_OLD_ONE = '[NG] Could not change password due to similar to previous one' SUCCESS = '[OK] Changed password successfully'","title":"LogMsgChangePaswd"},{"location":"reference/change_pswd_func/log/#ancestors-in-mro","text":"typing.Generic","title":"Ancestors (in MRO)"},{"location":"reference/change_pswd_func/log/#class-variables","text":"INVALID_NEW_PSWD INVALID_OLD_PSWD SIMILAR_TO_OLD_ONE SUCCESS","title":"Class variables"},{"location":"reference/change_pswd_func/log/#logmsgverifypswd","text":"class LogMsgVerifyPswd ( / , * args , ** kwargs ) Abstract base class for generic types. A generic type is typically declared by inheriting from this class parameterized with one or more type variables. For example, a generic mapping type might be defined as:: class Mapping(Generic[KT, VT]): def getitem (self, key: KT) -> VT: ... # Etc. This class can then be used as follows:: def lookup_name(mapping: Mapping[KT, VT], key: KT, default: VT) -> VT: try: return mapping[key] except KeyError: return default View Source class LogMsgVerifyPswd ( Generic [ T ] ) : # TODO Can be used these msg to check which message is shown when validation is failed on unit test INVALID_LENGTH = '[NG] The length needs to be from {} to {}.' . format ( MIN_VALID_LENGTH , MAX_VALID_LENGTH ) INVALID_CHAR = '[NG] Included invalid char' NOT_ALL_PATTERNS = \"[NG] All necessary patterns aren't included\" OVER_CONTINUOUS_SAME_CHARS = '[NG] Included continous more than {} same chars' . format ( MAX_CHAR_CONTINUOUS_NUM ) OVER_SP_CHAR_NUM = '[NG] Included more than {} special characters' . format ( MAX_SP_CHAR_NUM ) MORE_THAN_HALF_OF_LENGTH = '[NG] 50 % of password should not be a number' VALID = '[OK] Valid password'","title":"LogMsgVerifyPswd"},{"location":"reference/change_pswd_func/log/#ancestors-in-mro_1","text":"typing.Generic","title":"Ancestors (in MRO)"},{"location":"reference/change_pswd_func/log/#class-variables_1","text":"INVALID_CHAR INVALID_LENGTH MORE_THAN_HALF_OF_LENGTH NOT_ALL_PATTERNS OVER_CONTINUOUS_SAME_CHARS OVER_SP_CHAR_NUM VALID","title":"Class variables"},{"location":"reference/change_pswd_func/verify_pswd/","text":"Module change_pswd_func.verify_pswd View Sourceusr/bin/env python import re from .constants import ( MAX_CHAR_CONTINUOUS_NUM , MAX_SP_CHAR_NUM , MAX_VALID_LENGTH , MIN_VALID_LENGTH , SP_CHARS ) from .log import LogMsgVerifyPswd def verify_pswd ( pswd : str ) -> bool : print ( ' \\n [pswd]: {}' . format ( pswd )) # '\\n' is for pytest output if _check_length ( pswd ): print ( 'Password length is {}.' . format ( len ( pswd ))) print ( LogMsgVerifyPswd . INVALID_LENGTH ) elif _include_invalid_char ( pswd ): print ( LogMsgVerifyPswd . INVALID_CHAR ) elif _include_not_all_patterns ( pswd ): print ( LogMsgVerifyPswd . NOT_ALL_PATTERNS ) elif _include_over_continuous_same_chars ( pswd ): print ( LogMsgVerifyPswd . OVER_CONTINUOUS_SAME_CHARS ) elif _include_over_sp_char_num ( pswd ): print ( LogMsgVerifyPswd . OVER_SP_CHAR_NUM ) elif _include_num_more_than_half_of_length ( pswd ): print ( LogMsgVerifyPswd . MORE_THAN_HALF_OF_LENGTH ) else : print ( LogMsgVerifyPswd . VALID ) return True return False def _check_length ( pswd : str ) -> bool : ''' [Password requirement] 1. At least 18 alphanumeric characters and list of special chars !@#$&* ''' return len ( pswd ) < MIN_VALID_LENGTH or len ( pswd ) > MAX_VALID_LENGTH def _include_invalid_char ( pswd : str ) -> bool : ''' [Password requirement] 1. At least 18 alphanumeric characters and list of special chars !@#$&* ''' for x in pswd : # x.isalnum() unavailable for Hiragana, Kanji, etc if not bool ( re . search ( '[0-9a-zA-Z]' , x )) and x not in SP_CHARS : return True return False def _include_not_all_patterns ( pswd : str ) -> bool : ''' [Password requirement] 2. At least 1 Upper case, 1 lower case ,least 1 numeric, 1 special character ''' upper_flg = False lower_flg = False num_flg = False special_flg = False for x in pswd : if x . isupper (): upper_flg = True elif x . islower (): lower_flg = True elif x . isnumeric (): num_flg = True elif x in SP_CHARS : special_flg = True if upper_flg and lower_flg and num_flg and special_flg : return False return True def _include_over_continuous_same_chars ( pswd : str ) -> bool : ''' [Password requirement] 3. No duplicate repeat characters more than 4 ''' count = 1 prev_char = pswd [ 0 ] for x in list ( pswd )[ 1 :]: if x == prev_char : count += 1 else : # Reset count = 1 prev_char = x if count > MAX_CHAR_CONTINUOUS_NUM : return True return False def _include_over_sp_char_num ( pswd : str ) -> bool : ''' [Password requirement] 4. No more than 4 special characters ''' count = 0 for c in SP_CHARS : count += pswd . count ( c ) return count > MAX_SP_CHAR_NUM def _include_num_more_than_half_of_length ( pswd : str ) -> bool : ''' [Password requirement] 5. 50 % of password should not be a number ''' count = 0 for c in pswd : if c . isnumeric (): count += 1 return count >= len ( pswd ) / 2.0 Variables MAX_CHAR_CONTINUOUS_NUM MAX_SP_CHAR_NUM MAX_VALID_LENGTH MIN_VALID_LENGTH SP_CHARS Functions verify_pswd def verify_pswd ( pswd : str ) -> bool View Source def verify_pswd ( pswd : str ) -> bool : print ( ' \\n [pswd]: {} ' . format ( pswd )) # ' \\n ' is for pytest output if _check_length ( pswd ) : print ( ' Password length is {}. ' . format ( len ( pswd ))) print ( LogMsgVerifyPswd . INVALID_LENGTH ) elif _include_invalid_char ( pswd ) : print ( LogMsgVerifyPswd . INVALID_CHAR ) elif _include_not_all_patterns ( pswd ) : print ( LogMsgVerifyPswd . NOT_ALL_PATTERNS ) elif _include_over_continuous_same_chars ( pswd ) : print ( LogMsgVerifyPswd . OVER_CONTINUOUS_SAME_CHARS ) elif _include_over_sp_char_num ( pswd ) : print ( LogMsgVerifyPswd . OVER_SP_CHAR_NUM ) elif _include_num_more_than_half_of_length ( pswd ) : print ( LogMsgVerifyPswd . MORE_THAN_HALF_OF_LENGTH ) else : print ( LogMsgVerifyPswd . VALID ) return True return False","title":"Verify Pswd"},{"location":"reference/change_pswd_func/verify_pswd/#module-change_pswd_funcverify_pswd","text":"View Sourceusr/bin/env python import re from .constants import ( MAX_CHAR_CONTINUOUS_NUM , MAX_SP_CHAR_NUM , MAX_VALID_LENGTH , MIN_VALID_LENGTH , SP_CHARS ) from .log import LogMsgVerifyPswd def verify_pswd ( pswd : str ) -> bool : print ( ' \\n [pswd]: {}' . format ( pswd )) # '\\n' is for pytest output if _check_length ( pswd ): print ( 'Password length is {}.' . format ( len ( pswd ))) print ( LogMsgVerifyPswd . INVALID_LENGTH ) elif _include_invalid_char ( pswd ): print ( LogMsgVerifyPswd . INVALID_CHAR ) elif _include_not_all_patterns ( pswd ): print ( LogMsgVerifyPswd . NOT_ALL_PATTERNS ) elif _include_over_continuous_same_chars ( pswd ): print ( LogMsgVerifyPswd . OVER_CONTINUOUS_SAME_CHARS ) elif _include_over_sp_char_num ( pswd ): print ( LogMsgVerifyPswd . OVER_SP_CHAR_NUM ) elif _include_num_more_than_half_of_length ( pswd ): print ( LogMsgVerifyPswd . MORE_THAN_HALF_OF_LENGTH ) else : print ( LogMsgVerifyPswd . VALID ) return True return False def _check_length ( pswd : str ) -> bool : ''' [Password requirement] 1. At least 18 alphanumeric characters and list of special chars !@#$&* ''' return len ( pswd ) < MIN_VALID_LENGTH or len ( pswd ) > MAX_VALID_LENGTH def _include_invalid_char ( pswd : str ) -> bool : ''' [Password requirement] 1. At least 18 alphanumeric characters and list of special chars !@#$&* ''' for x in pswd : # x.isalnum() unavailable for Hiragana, Kanji, etc if not bool ( re . search ( '[0-9a-zA-Z]' , x )) and x not in SP_CHARS : return True return False def _include_not_all_patterns ( pswd : str ) -> bool : ''' [Password requirement] 2. At least 1 Upper case, 1 lower case ,least 1 numeric, 1 special character ''' upper_flg = False lower_flg = False num_flg = False special_flg = False for x in pswd : if x . isupper (): upper_flg = True elif x . islower (): lower_flg = True elif x . isnumeric (): num_flg = True elif x in SP_CHARS : special_flg = True if upper_flg and lower_flg and num_flg and special_flg : return False return True def _include_over_continuous_same_chars ( pswd : str ) -> bool : ''' [Password requirement] 3. No duplicate repeat characters more than 4 ''' count = 1 prev_char = pswd [ 0 ] for x in list ( pswd )[ 1 :]: if x == prev_char : count += 1 else : # Reset count = 1 prev_char = x if count > MAX_CHAR_CONTINUOUS_NUM : return True return False def _include_over_sp_char_num ( pswd : str ) -> bool : ''' [Password requirement] 4. No more than 4 special characters ''' count = 0 for c in SP_CHARS : count += pswd . count ( c ) return count > MAX_SP_CHAR_NUM def _include_num_more_than_half_of_length ( pswd : str ) -> bool : ''' [Password requirement] 5. 50 % of password should not be a number ''' count = 0 for c in pswd : if c . isnumeric (): count += 1 return count >= len ( pswd ) / 2.0","title":"Module change_pswd_func.verify_pswd"},{"location":"reference/change_pswd_func/verify_pswd/#variables","text":"MAX_CHAR_CONTINUOUS_NUM MAX_SP_CHAR_NUM MAX_VALID_LENGTH MIN_VALID_LENGTH SP_CHARS","title":"Variables"},{"location":"reference/change_pswd_func/verify_pswd/#functions","text":"","title":"Functions"},{"location":"reference/change_pswd_func/verify_pswd/#verify_pswd","text":"def verify_pswd ( pswd : str ) -> bool View Source def verify_pswd ( pswd : str ) -> bool : print ( ' \\n [pswd]: {} ' . format ( pswd )) # ' \\n ' is for pytest output if _check_length ( pswd ) : print ( ' Password length is {}. ' . format ( len ( pswd ))) print ( LogMsgVerifyPswd . INVALID_LENGTH ) elif _include_invalid_char ( pswd ) : print ( LogMsgVerifyPswd . INVALID_CHAR ) elif _include_not_all_patterns ( pswd ) : print ( LogMsgVerifyPswd . NOT_ALL_PATTERNS ) elif _include_over_continuous_same_chars ( pswd ) : print ( LogMsgVerifyPswd . OVER_CONTINUOUS_SAME_CHARS ) elif _include_over_sp_char_num ( pswd ) : print ( LogMsgVerifyPswd . OVER_SP_CHAR_NUM ) elif _include_num_more_than_half_of_length ( pswd ) : print ( LogMsgVerifyPswd . MORE_THAN_HALF_OF_LENGTH ) else : print ( LogMsgVerifyPswd . VALID ) return True return False","title":"verify_pswd"}]}